package br.fai.bloco7.db.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Repository;

import br.fai.bloco7.db.connection.ConnectionFactory;
import br.fai.bloco7.db.dao.PessoaDao;
import br.fai.bloco7.model.Pessoa;

@Repository
public class PessoaDaoImpl implements PessoaDao {

	@Override
	public List<Pessoa> readAll() {
		final List<Pessoa> users = new ArrayList<Pessoa>();

		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;

		try {
			connection = ConnectionFactory.getConnection();

			final String sql = "SELECT * FROM pessoa";

			preparedStatement = connection.prepareStatement(sql);

			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {

				final Pessoa person = new Pessoa();
				person.setId(resultSet.getLong("id"));
				person.setCpf(resultSet.getString("cpf"));
				person.setNome(resultSet.getString("nome"));
				person.setLogradouro(resultSet.getString("logradouro"));
				person.setBairro(resultSet.getString("bairro"));
				person.setCidadeId(resultSet.getLong("cidade_id"));
				person.setCep(resultSet.getString("cep"));
				person.setNumero(resultSet.getString("numero"));

				users.add(person);

			}

		} catch (final Exception e) {

		} finally {
			ConnectionFactory.close(resultSet, preparedStatement, connection);
		}

		return users;

	}

	@Override
	public Pessoa readById(final Long id) {

		Pessoa person = null;

		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;

		try {
			connection = ConnectionFactory.getConnection();

			final String sql = "SELECT * FROM pessoa where id = ?";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, id);

			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {

				person = new Pessoa();
				person.setId(resultSet.getLong("id"));
				person.setCpf(resultSet.getString("cpf"));
				person.setNome(resultSet.getString("nome"));
				person.setLogradouro(resultSet.getString("logradouro"));
				person.setBairro(resultSet.getString("bairro"));
				person.setCidadeId(resultSet.getLong("cidade_id"));
				person.setCep(resultSet.getString("cep"));
				person.setNumero(resultSet.getString("numero"));

			}

		} catch (final Exception e) {

		} finally {
			ConnectionFactory.close(resultSet, preparedStatement, connection);
		}

		return person;
	}

	@Override
	public Long create(final Pessoa entity) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean update(final Pessoa entity) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean delete(final Long id) {
		// TODO Auto-generated method stub
		return false;
	}

}
